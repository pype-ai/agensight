name: Simple CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.x'

jobs:
  build-ui:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./agensight/_ui/package-lock.json
        
    - name: Install UI dependencies
      run: |
        cd ./agensight/_ui
        npm ci
        
    - name: Build UI
      run: |
        cd ./agensight/_ui
        npm run build
        
    - name: Upload UI build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ui-build
        path: ./agensight/_ui/build/

  build-package:
    needs: build-ui
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download UI build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ui-build
        path: ./agensight/_ui/build/
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

  publish-staging:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: pip install twine
      
    - name: Update version for staging release
      run: |
        # Create a staging version with timestamp
        STAGING_VERSION=$(python -c "
        from datetime import datetime
        import os
        version = '0.5.4'  # Get from setup.py or version file
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        commit_sha = os.getenv('GITHUB_SHA', 'unknown')[:7]
        print(f'{version}.staging{timestamp}+{commit_sha}')
        ")
        echo "STAGING_VERSION=$STAGING_VERSION" >> $GITHUB_ENV
        echo "Staging version: $STAGING_VERSION"
        
    - name: Publish to Test PyPI (Staging)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
        
    - name: Test installation
      run: |
        sleep 30  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ agensight
        python -c "import agensight; print('âœ… Staging package installed successfully')"

  publish-dev:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: pip install twine
      
    - name: Update version for dev release
      run: |
        DEV_VERSION=$(python -c "
        from datetime import datetime
        import os
        version = '0.5.4'
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        commit_sha = os.getenv('GITHUB_SHA', 'unknown')[:7]
        print(f'{version}.dev{timestamp}+{commit_sha}')
        ")
        echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV
        echo "Dev version: $DEV_VERSION"
        
    - name: Publish to Test PyPI (Dev)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

  publish-prod:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: pip install twine
      
    - name: Publish to PyPI (Production)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}