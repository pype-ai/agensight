name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]
  release:
    types: [created]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.x'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 black isort
        pip install -e .
        
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: black --check .
      
    - name: Check import sorting with isort
      run: isort --check-only .
      
    - name: Run tests with pytest
      run: |
        pytest --cov=agensight --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build-ui:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./agensight/_ui/package-lock.json
        
    - name: Install UI dependencies
      run: |
        cd ./agensight/_ui
        npm ci
        
    - name: Build UI
      run: |
        cd ./agensight/_ui
        npm run build
        
    - name: Upload UI build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ui-build
        path: ./agensight/_ui/build/

  build-package:
    needs: [test, build-ui]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download UI build artifacts
      uses: actions/download-artifact@v3
      with:
        name: ui-build
        path: ./agensight/_ui/build/
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-dist
        path: dist/

  publish-staging:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: pip install twine
      
    - name: Update version for staging release
      run: |
        # Create a staging version with timestamp
        STAGING_VERSION=$(python -c "
        import setup
        from datetime import datetime
        version = '0.5.4'  # Get from setup.py
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        commit_sha = '${{ github.sha }}'[:7]
        print(f'{version}.staging{timestamp}+{commit_sha}')
        ")
        echo "STAGING_VERSION=$STAGING_VERSION" >> $GITHUB_ENV
        
    - name: Publish to Test PyPI (Staging)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
        
    - name: Run integration tests against staging
      run: |
        # Install from Test PyPI
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ agensight==$STAGING_VERSION
        
        # Run integration tests
        python -c "import agensight; print('Staging package imported successfully')"
        agensight --help

  publish-dev:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: pip install twine
      
    - name: Update version for dev release
      run: |
        # Create a dev version with timestamp
        DEV_VERSION=$(python -c "
        import setup
        from datetime import datetime
        version = '0.5.4'  # Get from setup.py
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        print(f'{version}.dev{timestamp}')
        ")
        echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_ENV
        
    - name: Publish to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

  publish-prod:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: pip install twine
      
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*

  publish-release:
    needs: build-package
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: pip install twine
      
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*