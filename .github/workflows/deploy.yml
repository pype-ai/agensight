name: Deploy SDK

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Build package
      run: |
        echo "üì¶ Building package for debug..."
        python -m pip install --upgrade pip build
        python -m build
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
        
    - name: Debug Step 1 - Environment Info
      run: |
        echo "üîç Step 1: Environment Information"
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "GitHub ref: ${{ github.ref }}"
        
    - name: Debug Step 2 - Secret Check
      env:
        TEST_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        echo "üîç Step 2: Secret Debug"
        if [ -z "$TEST_TOKEN" ]; then
          echo "‚ùå SECRET IS EMPTY!"
          exit 1
        else
          echo "‚úÖ Secret exists"
          echo "Secret length: ${#TEST_TOKEN} characters"
        fi
        
    - name: Debug Step 3 - Token Format
      env:
        TEST_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        echo "üîç Step 3: Token Format Check"
        echo "First 15 characters: ${TEST_TOKEN:0:15}"
        
        if [[ "$TEST_TOKEN" == pypi-* ]]; then
          echo "‚úÖ Token starts with 'pypi-'"
        else
          echo "‚ùå Token does NOT start with 'pypi-'"
        fi
        
    - name: Debug Step 4 - SHOW FULL TOKEN
      env:
        TEST_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        echo "üîç Step 4: FULL TOKEN (VISIBLE IN LOGS!)"
        echo "Full token: $TEST_TOKEN"
        
    - name: Debug Step 5 - Package Files
      run: |
        echo "üîç Step 5: Package files"
        echo "Files in dist:"
        ls -la dist/
        
    - name: Debug Step 6 - Install Twine
      run: |
        echo "üîç Step 6: Installing twine"
        pip install twine
        
    - name: Debug Step 7 - Upload Test
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        echo "üîç Step 7: Upload attempt"
        echo "TWINE_USERNAME: $TWINE_USERNAME"
        echo "TWINE_PASSWORD length: ${#TWINE_PASSWORD}"
        
        echo "Attempting upload..."
        twine upload --repository testpypi dist/* --verbose || {
          echo "‚ùå Upload failed!"
          echo "Token starts with: ${TWINE_PASSWORD:0:15}"
          exit 1
        }
        
    - name: Success
      run: |
        echo "‚úÖ SUCCESS! Token is working!"

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Production placeholder
      run: echo "Production deploy would happen here"