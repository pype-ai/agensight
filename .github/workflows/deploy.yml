name: Deploy SDK

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Set up Node.js (for UI build)
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Build UI (if exists)
      run: |
        if [ -d "./agensight/_ui" ]; then
          echo "Building UI..."
          cd ./agensight/_ui
          npm install
          npm run build
          cd ../..
        else
          echo "No UI directory found, skipping UI build"
        fi
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade packaging  # Fix for twine 6.1.0 license-file bug
        pip install --upgrade setuptools  # Also upgrade setuptools
        pip install build twine
        
    - name: Show package info before build
      run: |
        echo "🔍 Package name in setup.py:"
        grep -n "name=" setup.py
        echo "📦 Python version: $(python --version)"
        echo "🔧 Packaging version: $(pip show packaging | grep Version)"
        echo "🛠️  Setuptools version: $(pip show setuptools | grep Version)"
        echo "🛠️  Build version: $(pip show build | grep Version)"
        
    - name: Build package
      run: |
        echo "📦 Building package..."
        python -m build
        echo "📋 Built files:"
        ls -la dist/
        
    - name: Check package metadata
      run: |
        echo "🔍 Checking built package for license-file issues..."
        twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
      
    - name: Install twine with updated packaging
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade packaging  # Ensure we have the fix
        pip install twine
        
    - name: Deploy to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        echo "🚀 Deploying to Test PyPI..."
        echo "📦 Files to upload:"
        ls -la dist/
        
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "❌ TWINE_PASSWORD is empty!"
          exit 1
        else
          echo "✅ Token is available"
          echo "🔑 Token length: ${#TWINE_PASSWORD} characters"
        fi
        
        echo "📤 Starting upload..."
        twine upload --repository testpypi dist/* --verbose --non-interactive
        
    - name: Verify deployment
      run: |
        echo "✅ Upload completed. Testing installation..."
        sleep 60  # Wait for package to be available
        PACKAGE_NAME=$(ls dist/*.whl | head -1 | xargs basename | cut -d'-' -f1)
        echo "🔍 Testing installation of: $PACKAGE_NAME"
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ $PACKAGE_NAME
        python -c "import agensight; print('✅ Package imported successfully')" || echo "⚠️ Import test skipped"

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
      
    - name: Install twine with updated packaging
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade packaging
        pip install twine
        
    - name: Deploy to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        echo "🚀 Deploying to Production PyPI..."
        twine upload dist/* --verbose --non-interactive