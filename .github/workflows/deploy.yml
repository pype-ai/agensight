name: Deploy SDK

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Set up Node.js (for UI build)
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Build UI (if exists)
      run: |
        if [ -d "./agensight/_ui" ]; then
          echo "Building UI..."
          cd ./agensight/_ui
          npm install
          npm run build
          cd ../..
        else
          echo "No UI directory found, skipping UI build"
        fi
        
    - name: Install build tools (matching your local script)
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel twine
        
    - name: Clean build directories (matching your script)
      run: |
        rm -rf dist/*
        rm -rf build/*
        
    - name: Build package (matching your script method)
      run: |
        echo "üì¶ Building package using setup.py (same as your local script)..."
        python setup.py sdist bdist_wheel
        echo "üìã Built files:"
        ls -la dist/
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
        
    - name: Deploy to Test PyPI (using your script method)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
      run: |
        echo "üöÄ Deploying to Test PyPI using your script method..."
        echo "üì¶ Files to upload:"
        ls -la dist/
        
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "‚ùå TEST_PYPI_TOKEN not available!"
          exit 1
        fi
        
        # Use the same command structure as your script but for Test PyPI
        twine upload dist/* -u __token__ -p $TWINE_PASSWORD --repository testpypi --verbose
        
    - name: Verify deployment
      run: |
        echo "‚úÖ Upload completed!"
        PACKAGE_NAME=$(ls dist/*.whl | head -1 | xargs basename | cut -d'-' -f1)
        echo "üåê Package available at: https://test.pypi.org/project/$PACKAGE_NAME/"

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
        
    - name: Install twine
      run: |
        python -m pip install --upgrade pip
        pip install twine
        
    - name: Deploy to Production PyPI (exactly like your script)
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        echo "üöÄ Deploying to Production PyPI (same as your local script)..."
        twine upload dist/* -u __token__ -p $TWINE_PASSWORD