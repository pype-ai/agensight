name: Deploy SDK

on:
  push:
    branches: [ main, staging ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Set up Node.js (for UI build)
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        
    - name: Build UI (if exists)
      run: |
        if [ -d "./agensight/_ui" ]; then
          echo "Building UI..."
          cd ./agensight/_ui
          npm install
          npm run build
          cd ../..
        else
          echo "No UI directory found, skipping UI build"
        fi
        
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade packaging  # Fix for license-file issue
        pip install build twine
        
    - name: Show package info before build
      run: |
        echo "üîç Package name in setup.py:"
        grep -n "name=" setup.py
        
    - name: Build package
      run: |
        echo "üì¶ Building package..."
        python -m build
        echo "üìã Built files:"
        ls -la dist/
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: package-dist
        path: dist/

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    environment: staging  # ‚Üê This is the key line!
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
      
    - name: Deploy to Test PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}  # Now accessible!
      run: |
        echo "üöÄ Deploying to Test PyPI..."
        echo "üì¶ Files to upload:"
        ls -la dist/
        
        if [ -z "$TWINE_PASSWORD" ]; then
          echo "‚ùå TWINE_PASSWORD is empty!"
          exit 1
        else
          echo "‚úÖ Token is available"
          echo "üîë Token length: ${#TWINE_PASSWORD} characters"
        fi
        
        pip install twine
        twine upload --repository testpypi dist/* --verbose --non-interactive

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: package-dist
        path: dist/
      
    - name: Deploy to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}  # Repository secret
      run: |
        echo "üöÄ Deploying to Production PyPI..."
        pip install twine
        twine upload dist/* --verbose --non-interactive